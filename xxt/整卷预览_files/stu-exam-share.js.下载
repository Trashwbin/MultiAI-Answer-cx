function setStuAnswerOfSomeQues(quietSubmit){

	 var thisObj;
	if(quietSubmit){
	     thisObj = $(quietSubmit);
	}else{
	    thisObj = $('#submitTest');
	}
    var nowQuestionId= thisObj.find('input[name="questionId"]').val();
    if(!nowQuestionId){
        return -1;
    }

    var nowTypeQuestionId="type"+nowQuestionId;
    var questionType= thisObj.find("input[name='"+nowTypeQuestionId+"']").val();
    var isAccessibleCustomFid = $("#isAccessibleCustomFid").val();
    // 避免自动提交时简答题答案丢失
    if (questionType == 4 || questionType == 5 || questionType == 6 || questionType == 7 || questionType == 8 || questionType ==17 || questionType == 18) {
        if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
            return questionType;
        }
        
        var me = UE.getEditor('answer' + nowQuestionId);
        try{ 
           checkControlWordMax(me,questionType);
    	   me && me.sync();
        }catch(err){
           console.log(err);
        }
    }else if (questionType == 2 || questionType == 9 || questionType == 10) {
		var blankStr = "answerEditor" + nowQuestionId;
		var blankInputs = $("textarea[name^='" + blankStr + "']");
		blankInputs.length > 0 && blankInputs.each(function () {
			var blankEditorId = $(this).attr('id');
			if(blankEditorId){
                if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                    return questionType;
                }
			    var me = UE.getEditor(blankEditorId);
			    try{ 
			    	me && me.sync();
			    }catch(err){
			        console.log(err);
			    }
			}
		});
	}

    if(questionType==11){
        var answerPair=[];
        thisObj.find(".line_answer").find(".select").each(function(index){
            var checked=$(this).attr("value");
            var obj={};
            obj.name=(index+1);
            obj.content=(checked);
            answerPair.push(obj);
        });
        var answerStr=JSON.stringify(answerPair);
        thisObj.find("input[name='answer"+nowQuestionId+"']").val(answerStr);
    }else if(questionType == 13){
        var answerStr="";
        thisObj.find(".orderSelect").find(".select").each(function(){
            var checked=$(this).attr("value");
            answerStr=answerStr+checked;
        });
        thisObj.find("input[name='answer"+nowQuestionId+"']").val(answerStr);

    }else if(questionType == 14){//新完型填空
        var answerObj={};
        thisObj.find(".filling_answer").each(function(){
            var itemId=$(this).find("input[name='itemId']").val();
            var checked=$(this).find(".answerClass").val();
            if(checked == undefined){
                checked="";
            }
            var info={};
            info.answer=checked;
            answerObj[itemId]=info;
        });
        var answer=[];
        answer.push(answerObj);
        var answerStr=JSON.stringify(answer);
        thisObj.find("input[name='answer"+nowQuestionId+"']").val(answerStr);
    } else if (questionType == 15 || questionType == 16 || questionType == 19 || questionType == 25) {// 新阅读理解、综合题
        var answerObj={};
        thisObj.find("input[name='readCompreHension-childType']").each(function(index){
            var type=$(this).val();
            var itemId=$(this).next().val();
            var itemAnswer="";
            switch(parseInt(type)){
                case 0:
                case 3:{
                    itemAnswer= thisObj.find("input[name='answer" + nowQuestionId + itemId + "']").val();
                    break;
                }
                case 1:{
                    thisObj.find("input[name='answer" + nowQuestionId + itemId + "']").each(function() {
                        itemAnswer +=$(this).val();
                    });
                    var randomOptions = $("#randomOptions").val();
                    itemAnswer = randomOptions ? sortMultiAnswer(itemAnswer) : itemAnswer;
                    break;
                }
                case 2:{
                    var answerItem=[];
                    var blankNum=thisObj.find("input[name='" + nowQuestionId + itemId + "blankNum']").val();
                    for(var i=1;i<=blankNum;i++){
                        var answerEditorId="answerEditor" + nowQuestionId + itemId;
                        answerEditorId=answerEditorId + i;
                        var answerItemStr;
                        if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                            answerItemStr=$("#" + answerEditorId).val();
                        } else {
                            answerItemStr=UE.getEditor(answerEditorId).getContent();
                        }
                        var item={};
                        item.content=answerItemStr;
                        item.name=i.toString();
                        answerItem.push(item);
                    }
                    itemAnswer=answerItem;
                    break;
                }
                case 4:{
                    var answerEditorId = "answer" + nowQuestionId + itemId;
                    var answerEditorStr;
                    if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                        answerEditorStr = $("#" + answerEditorId).val();
                    } else {
                        answerEditorStr = UE.getEditor(answerEditorId).getContent();
                    }
                    itemAnswer=answerEditorStr;
                    break;
                }
                default: { }
            }

            var info={};
            info.type=parseInt(type);

            info.answer=(itemAnswer !== undefined ? itemAnswer: "");
            answerObj[itemId]=info;
        });
        var answer=[];
        answer.push(answerObj);
        var answerStr=JSON.stringify(answer);
        thisObj.find("input[name='answer"+nowQuestionId+"']").val(answerStr);
    } else if (questionType == 17) {
        var answer = [];
        var thisDiv = "#procedural-" + nowQuestionId;
        var currentEditor = UE.getEditor("answer"+nowQuestionId);
        var language= thisObj.find(thisDiv +" .languageSelect").attr("value");
        var richcode=currentEditor.getContent();
        var code=currentEditor.getPlainTxt(); code=UE.utils.html(code);
        var item={};
        item.language=parseInt(language);
        item.answer=richcode;
        item.answerTxt=code;
        answer[0]=item;
        var answerStr = JSON.stringify(answer);
        thisObj.find("input[name='answer" + nowQuestionId + "']").val(answerStr);
    }else if(questionType == 1){
        var randomOptions = $("#randomOptions").val();
        var multipleChoiceInput=thisObj.find("input[name='answers" + nowQuestionId + "']");
        var mulChoice=multipleChoiceInput.val();
        mulChoice = randomOptions ? sortMultiAnswer(mulChoice) : mulChoice;
        multipleChoiceInput.val(mulChoice);
    }
    return questionType;
}


function lockSubmit(lock){
	if(lock){
	    window.submitOnce = true;
		$('body').css({'pointer-events': 'none'});
	}else{
		window.submitOnce = false;
        $('body').css({'pointer-events': 'auto'});
	}
}

submitAjaxHandle = null ;
toastLoadingCloseHandle = null;
function submitForm(tempSave,quietSubmit,callBack) {

  try{
	/*
    if(tempSave && quietSubmit){
        submitAjaxHandle != null && submitAjaxHandle.abort();
    }
    */
window.BeforeUnloadActive = false;

	if(tempSave && window.submitOnce){
	    return;
	} else if(tempSave){
		lockSubmit(true);
	    setTimeout(function(){
	    	if(window.submitOnce) {
	    		toastLoadingCloseHandle = $.toast({'type': 'loading', 'content': '正在提交...','time':0});
	    	}
		}, 1000);
	}

    var timeOver = $("#timeOver").val();
    $("#tempSave").val(tempSave);

	//答题页面还是预览页面
	var answerMode = $('#answerMode').val() || 0;

    var submitStyle = 0;
    var submitTest = $("#submitTest");

var qType = -1;
    if(answerMode == 0){
    	qType = setStuAnswerOfSomeQues();
    }else if(answerMode == 1 && quietSubmit){
    	qType = setStuAnswerOfSomeQues(quietSubmit);
    }

   var submitData = "";
    if(!tempSave && answerMode == 1){
	    $(".saveButtonClass").each(function () {
	        if($(this).is(':visible')) {
	           var dataid = $(this).attr("dataid");
	           var div = $("#sigleQuestionDiv_" + dataid);
	           qType = setStuAnswerOfSomeQues(div);
	            var thisQuestionParam = answerModeParam(div);
	            if(typeof thisQuestionParam != "undefined") {
	                submitData += "&" + thisQuestionParam;
	            }
	        }
	    });
    }

    //最终提交
    if(!tempSave && timeOver == "false") {
    	var monitorforcesubmit = $('#monitorforcesubmit').val();
    	if(monitorforcesubmit > 0){
    		submitStyle = monitorforcesubmit;
    	}
        finalSubmitTest(tempSave,submitTest,submitStyle,submitData);
    } else if(!tempSave && timeOver == "true"){
    	/*
        var submitData = "";
        $(".saveButtonClass").each(function () {
            if($(this).is(':visible')) {
               var dataid = $(this).attr("dataid");
               var div = $("#sigleQuestionDiv_" + dataid);

                setStuAnswerOfSomeQues(div);
                var thisQuestionParam = answerModeParam(div);
                if(typeof thisQuestionParam != "undefined") {
                    submitData += "&" + thisQuestionParam;
                }
            }
        });
     */
        //时间到了自动提交
      if(timeOver == "true"){
            submitStyle = 4;
        }
        finalSubmitTest(tempSave,submitTest,submitStyle,submitData);
    } else {
        var pos = "";
        try{
            pos = getEnc();
            if(pos){
				pos = pos.replace(/\|/g,'%7C');
			}
    		var qid = quietSubmit && (quietSubmit.find('input[name="questionId"]').val() || '');
    		if(pos && qid){
    			pos = pos.replace('qid=&', 'qid=' + qid + '&');
    		}
        }catch(ex){}

        // 临时保存
        var param = getParamStr();
        param = param + "&pos=" + pos + '&version=1' + '&view=json';
    	if(window.Edit_Timed_Saving){
    		param = param + '&timedsave=1';
    	}
    	if(window.Edit_LocalCache_Saving){
    		param = param + '&lcsave=1';
    	}
    	if(window.Ueditor_Attachment_Saving){
    		param = param + '&attachsave=1';
    	}
        var ajax_url = $("#saveUrl").val()  + param;
        var ajax_type = "post";
        var ajax_data = $("#submitTest").serialize();
        if(quietSubmit){
            //设置答案
            //setStuAnswerOfSomeQues(quietSubmit);
            var thisQuestionParam = answerModeParam(quietSubmit);
            if(thisQuestionParam){
                ajax_data = ajax_data + '&'  + thisQuestionParam;
            }
        }

        var timeOut = 5000;
        if(qType == 17){
        	timeOut = 20000;
        }

    	var ajaxSubmitFunc = function(csign,cxcid,cxtime,signk,signt,code,count,ecode){
    		ajax_url +=  '&_csign=' + csign + '&_signcode=' + code  + '&_signc=' + count + "&_signe=" + ecode + '&_signk=' + encodeURIComponent(signk)
			+ '&_cxcid=' + cxcid + '&_cxtime=' + cxtime + '&_signt=' + signt;
			if(signk){
				ajax_data +=  '&cxcid=' + cxcid + '&cxtime=' + cxtime + '&signt=' + signt + '&signk=' + encodeURIComponent(signk);
			}    submitAjaxHandle = $.ajax({
            type : ajax_type,
            url : ajax_url,
            data : ajax_data,
            dataType : 'json',
            timeout: timeOut,
            success : function(data) {

            	//检查关闭toast loading 提示
               if(toastLoadingCloseHandle != null){
            	   toastLoadingCloseHandle && toastLoadingCloseHandle()
                   toastLoadingCloseHandle = null;
                }

                var status = data.status;
                var msg = data.msg ;


             	if (data.error == 'invalid_verify'){
					safefilter && safefilter.showVerify2(_HOST_CP2_);
					$('iframe[src*="antispiderShowVerify"]').css('z-index',9999);
				    $('html, body').animate({scrollTop:0});
			        $.toast({type: 'notice', content: '请输入验证码'});
					return;
				}

                //检查登录状态失效
                if(data.result == 0 && status == false){
                	status =  "error";
                	msg =  "提交失败：" + msg;
                }

                if(status == 'submitted' || status == 'forceSubmitted'){
                	closeMonitor();
                    removeTimeOverSubmitTimers();
                }

                if (status == "error" || status == 'submitted') {
                    //window.submitOnce = false;
                    $.toast({type: 'failure', content: msg});
                    if(status == 'submitted'){
                    	 jumpExamLook();
                    }
                    return;
                }else if(status == 'forceSubmitted'){
                    //window.submitOnce = false;
                    clearInterval(timer);
                    jumpExamLook();
                    return;
                }else if(status == 'resetTimeOver'){
                    removeTimeOverSubmitTimers();
                    $("#timeOver").val(false);
                    $("#tempSave").val(true);
                    submitCheckRemainTime(data);
                    return;
                }else if(status == 'answerLocked'){
						$('#answerLocked').val(data.lockedType);
						lockExamPopTip(data.lockedType);
	                    return;
	                }
                if(data.monitorparam){
                    data.monitorparam.answerMode = answerMode;
                }

                answerRecordLog && answerRecordLog(data.monitorparam);
                callBack && callBack(data.data);
                submitCheckRemainTime(data);
                ueditorAnswerLocalCacheHandle.clearQuesLocalCache(data);
            },
            error : function(xhr,statusText){
            	if(!window.Edit_Timed_Saving && !window.Edit_LocalCache_Saving && !window.Ueditor_Attachment_Saving){
                //提交失败
	            	if(statusText == 'timeout' || statusText == 'abort' || (statusText == 'error' && xhr.status == 0)){
	            		$.toast({type: 'failure', content: '提交失败：无法连接到网络'});
	            	}else if((statusText == 'error' || statusText == 'parsererror') && xhr.status != 0){
	            		$.toast({type: 'failure', content: '提交失败：服务异常，请重试'});
	            	}else{
	            		$.toast({type: 'failure', content: '提交失败'});
	            	}
            	}
                //window.submitOnce = false;
            },
            complete : function(){
                lockSubmit(false);
                submitAjaxHandle = null;
                timedSaveState(false);
                localCacheSaveState(false);
                attachSaveState(false);
            }
        });};
    	var signSupport = checkClientSignatureSupport() ? 1 : 0;
    	if(signSupport == 1){
    		submitExamSignature(ajaxSubmitFunc,extractQidAnswerFrom(ajax_data));
		 }else{
			 ajaxSubmitFunc(signSupport);
		 }
    }

  }catch(err){
	  lockSubmit(false);
	  timedSaveState(false);
	  localCacheSaveState(false);
	  attachSaveState(false);
  }

}


function finalSubmitTest(tempSave,formEle,submitStyle,submitData){
	window.BeforeUnloadActive = false;
    function version(url){
        var re = /&version=(\d+)/;
        var version = 1;
        if (re.test(url)) {
            var arr = re.exec(url);
            version += parseInt(arr[1]);
            url = url.replace(re, '&version=' + version);
        } else {
            url = url + '&version=1';
        }
        return url;
    }

    var pos = "";
    try{
        pos = getEnc();
        if(pos){
			pos = pos.replace(/\|/g,'%7C');
		}
    }catch(ex){}

    var actionStr = version(formEle.attr('action'));
    formEle.attr('action', actionStr);
    var ajax_url  = actionStr + "&tempSave=" + tempSave + "&pos=" + pos + '&view=json';


    var data = formEle.serialize();
    if(typeof submitData != "undefined" && submitData != "") {
        data += submitData;
    }

    var isAccessibleCustomFid = $("#isAccessibleCustomFid").val();
    var submitConfirmPopHidden = $("#submitConfirmPopHidden");

 	var ajaxSubmitFunc = function(csign,cxcid,cxtime,signk,signt,code,count,ecode){
 		ajax_url +=  '&_csign=' + csign + '&_signcode=' + code  + '&_signc=' + count + "&_signe=" + ecode + '&_signk=' + encodeURIComponent(signk)
		   + '&_cxcid=' + cxcid + '&_cxtime=' + cxtime + '&_signt=' + signt ;
		if(signk){
			data +=  '&cxcid=' + cxcid + '&cxtime=' + cxtime + '&signt=' + signt + '&signk=' + encodeURIComponent(signk);
		}
    $.ajax({
        type : 'post',
        url : ajax_url,
        data : data,
        dataType : 'json',
        success : function(result) {
            var status = result.status;
            var msg = result.msg || I18N.subFailed;
            if(!status || status != 'success'){

             	if (result.error == 'invalid_verify'){
					safefilter && safefilter.showVerify2(_HOST_CP2_);
					$('iframe[src*="antispiderShowVerify"]').css('z-index',9999);
				    $('html, body').animate({scrollTop:0});
			        $.toast({type: 'notice', content: '请输入验证码'});
					return;
				}
             	if (result.result == 0 && status == false) {
             	    $.toast({type: 'failure',content: "提交失败：" + msg});
             	   return;
             	}

                if(status == 'submitted' || status == 'forceSubmitted'){
                    removeTimeOverSubmitTimers();
                    closeMonitor();
                    $.toast({type: 'success', content: I18N.subSucc});
                    if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                        submitConfirmPopHidden.attr("tabindex","0");
                        submitConfirmPopHidden.attr("aria-label","提交成功!");
                    }

                    setTimeout(function() {
                        jumpExamLook();
                    }, 1000);
                }else if(status == 'resetTimeOver'){
                    removeTimeOverSubmitTimers();
                    $("#timeOver").val(false);
                    $("#tempSave").val(true);
                    submitCheckRemainTime(result);
                } else{
                    // 无障碍单位走定制,延迟语音读取处理
                    if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                        submitConfirmPopHidden.attr("tabindex","0");
                        submitConfirmPopHidden.attr("aria-label","提交失败!");
                    }
                    $.toast({type: 'failure', content: msg});
                }

                // 无障碍单位走定制,延迟语音读取处理
                if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                    submitConfirmPopHidden.focus();
                    setTimeout(function() {
                        submitConfirmPopHidden.attr("tabindex","-1")
                        $("#submitConfirmPop").fullFadeOut();
                    }, 600)

                } else {
                    $("#submitConfirmPop").fullFadeOut();
                }
                return;
            }

            var data = {};
            data.submitStyle = submitStyle;
            finalSubmitExamLog(data);
removeTimeOverSubmitTimers();
            closeMonitor();

            if(submitStyle == 4) {
            	var consumeMinutes = result.consumeMinutes || 0;
 				if(consumeMinutes > 0){
 					$('.consumeMinutes').html(consumeMinutes);
 				}
               $("#timeOverSubmitConfirmPop .confirmClose").attr('onclick','timOverconfirmCloseCallBack();');
               $("#timeOverSubmitConfirmPop").fullFadeIn();
               return;
            }

            if(submitStyle == 5){
				exitForceSubmitTip($('#exitCount').val() || 0);
				return;
			}

			if(submitStyle == 8){
				switchScreenDurationLimitTip($('#switchScreenDurationLimit').val() || 0);
				return;
			}

            $.toast({type: 'success', content: I18N.subSucc});
            setTimeout(function() {
                jumpExamLook();
            }, 1000);

            // 无障碍单位走定制,延迟语音读取处理
            if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                submitConfirmPopHidden.attr("tabindex","0");
                submitConfirmPopHidden.attr("aria-label","提交成功!");
                submitConfirmPopHidden.focus();
                setTimeout(function() {
                    submitConfirmPopHidden.attr("tabindex","-1")
                    $("#submitConfirmPop").fullFadeOut();
                }, 600)

            } else {
                $("#submitConfirmPop").fullFadeOut();
            }
        },
        error : function(result){
            $.toast({type: 'failure', content: I18N.subFailed});
            // 无障碍单位走定制,延迟语音读取处理
            if (isAccessibleCustomFid && isAccessibleCustomFid == "1") {
                submitConfirmPopHidden.attr("tabindex","0");
                submitConfirmPopHidden.attr("aria-label","提交失败!");
                submitConfirmPopHidden.focus();
                setTimeout(function() {
                    submitConfirmPopHidden.attr("tabindex","-1")
                    $("#submitConfirmPop").fullFadeOut();
                }, 600)
            } else {
                $("#submitConfirmPop").fullFadeOut();
            }
        },
		complete : function(){
			ueditorAnswerLocalCacheHandle.clearExamLocalCache(true);
		}
    });};
 	var signSupport = checkClientSignatureSupport() ? 1 : 0;
	if(signSupport == 1){
		submitExamSignature(ajaxSubmitFunc,extractQidAnswerFrom(data));
	 }else{
		 ajaxSubmitFunc(signSupport);
	 }
}


function getParamStr() {
    var testPaperId = $("#testPaperId").val();
    var testUserRelationId = $("#testUserRelationId").val();
    var courseId = $("#courseId").val();
    var classId = $("#classId").val();
    var cpi = $("#cpi").val();
    var tempSave=$("#tempSave").val();
    if(typeof(cpi)=="undefined"){
        cpi = 0;
    }
    return  "?classId=" + classId + "&courseId=" + courseId +"&cpi="+ cpi + "&testPaperId=" + testPaperId + "&testUserRelationId=" + testUserRelationId + "&tempSave=" + tempSave;
}


//首次进入考试日志
function entryExamLog(data){
    var snapshotMonitor = $('#snapshotMonitor').val();
    if(snapshotMonitor != 1){
        return;
    }
    var eventType = 0;
    pushExamMonitorLog(eventType,data);
}

//重新进入考试日志
function rentryExamLog(data){
    var snapshotMonitor = $('#snapshotMonitor').val();
    if(snapshotMonitor != 1){
        return;
    }
    var eventType = 1;
    pushExamMonitorLog(eventType,data);
}

//提交答案日志
function answerRecordLog(answerData){
    var snapshotMonitor = $('#snapshotMonitor').val();
    if(snapshotMonitor != 1){
        return;
    }
    if(!answerData){
        return;
    }
    
    var answerMode = $('#answerMode').val() || 0;
	if(answerMode == 1 || window.Edit_Timed_Saving || window.Edit_LocalCache_Saving || window.Ueditor_Attachment_Saving){
		var submitTime = answerData.submitTime || -1;
		if(submitTime > 0){
			$('#enterPageTime').val(submitTime);
		}
	}
    
    var eventType = 3;
    pushExamMonitorLog(eventType,answerData);
}

//最终提交考试日志
function finalSubmitExamLog(data){
    var snapshotMonitor = $('#snapshotMonitor').val();
    if(snapshotMonitor != 1){
        return;
    }
    var eventType = 2;
    pushExamMonitorLog(eventType,data);
}

//切屏日志
function switchScreenLog(backTime,outTime,duration,status){
	var switchScreenControl = $('#switchScreenControl').val();
	if(switchScreenControl != 1){
		return;
	}
	var eventType = 4;
	var data = {
			'backTime' : backTime,
			'outTime' : outTime,
			'duration' : duration
	};
	pushExamMonitorLog(eventType,data);
}

//监控抓拍日志
function snapshotMonitorLog(data){
	var snapshotMonitor = $('#snapshotMonitor').val();
	if(snapshotMonitor != 1){
		return;
	}
	  if(!data){
			return;
	  }
	 // alert(data.funconfig);
	  var funconfig = JSON.parse(data.funconfig || data.funConfig);
	  var answerId = $('#testUserRelationId').val();
	  var classId = $('#classId').val();
	  if(funconfig.answerId != answerId || funconfig.classId != classId){
		  return;
	  }
	  var similarity = data.similarity;
	  var status = true;
	  if(similarity < 50){
		  status = false;
	  }
	  data.status = status;
	  var eventType = 5;
	  pushExamMonitorLog(eventType,data);
}

//监控截屏日志
function clientSnapShotLog(data) {
	var snapshotMonitor = $('#snapshotMonitor').val();
	if (snapshotMonitor != 1) {
		return;
	}
	if (!data) {
		return;
	}
	var funconfig = JSON.parse(data.funconfig || data.funConfig);
	var answerId = $('#testUserRelationId').val();
	var classId = $('#classId').val();
	if (funconfig.answerId != answerId || funconfig.classId != classId) {
		return;
	}
	var eventType = 8;
	pushExamMonitorLog(eventType, data);
}


function pushExamMonitorLog(eventType,data,callBack) {
	try{
		if (typeof (data) != 'object') {
			data = {};
		}
		var url = '/keeper/api/receiveExamLogs?eventType=' + eventType;
		var currentFaceId = data.currentFaceId;

        if (eventType == 0 && ( typeof (currentFaceId) == "undefined" || currentFaceId == "")) {
            var _version=data.version;
            if (typeof (_version) != "undefined" && _version != -1) {
               // url = '/keeper/api/receiveExamLogs?currentFaceId=false&eventType=' + eventType;
                url = url + '&currentFaceId=false';
            }
        }
		
		var eventTime = new Date().getTime();
		var ip = "";
		if (eventType == 1) {
			eventTime = data.rentryExamTime;
		} else if (eventType == 2) {
			eventTime = data.finalSubmitTime;
		} else if (eventType == 3) {
			eventTime = data.submitTime;
		}
		//data.device = 0;
	
		var courseId = $('#courseId').val();
		var examRelationId = $('#testPaperId').val();
		var answerId = $('#testUserRelationId').val();
		var clazzId = $('#classId').val();
		var personId = $('#cpi').val();
		var log = {
				"courseId":courseId,
				"clazzId": clazzId,
				"personId":personId,
				"examRelationId":examRelationId,
				"answerId":answerId,
				"eventType":eventType,
				"ip":ip,
				"data":data
		};
		var logStr = JSON.stringify(log);
	    var monitorEnc = $('#monitorEnc').val();
	    var ajaxLogFunc = function(signk){
		    var dataParam = {"log":logStr, "enc":monitorEnc};
		    if(signk){
		    	dataParam.signk = signk;
		    }
			$.ajax({
				type : 'post',
				dataType : 'json',
				url : url,
				data : dataParam,
				success : function(data) {
					callBack && callBack(data);
				}
			});
	   };
	   /*
	   if(checkClientSignatureSupport()){
			 keeperLogSignature(ajaxLogFunc,{"log":logStr});
		 }else{
			 ajaxLogFunc();
		}
		*/
	   ajaxLogFunc();
	}catch(err){}
}


function removeTimeOverSubmitTimers(){
    var overTimeSubmitTimers = window.OverTimeSubmitTimers;
    if(!overTimeSubmitTimers || overTimeSubmitTimers.length == 0){
        return ;
    }
    for(var i = 0 ; i < overTimeSubmitTimers.length; i++){
        var overTimeSubmitTimer = overTimeSubmitTimers[i];
        if(overTimeSubmitTimer){
            clearTimeout(overTimeSubmitTimer);
        }
    }
}

function timeOverSubmitTest() {
	submitForm(false, false);
	//时间用完提交后，默认重试两次
	if (!window.OverTimeSubmitTimers) {
		window.OverTimeSubmitTimers = [];
	}
	var overTimeSubmitTimers = window.OverTimeSubmitTimers;
	for (var i = 0; i < 2; i++) {
		var overTimer = setTimeout(function() {
			submitForm(false, false);
		}, (i + 1) * 5000);
		overTimeSubmitTimers.push(overTimer);
	}
}

function goExamList() {
    var qbanksystem =  $('#qbanksystem').val();
    var qbankbackurl =  $('#qbankbackurl').val();
    if(qbanksystem == 1 && qbankbackurl !== ''){
        qbankbackurl = decodeURIComponent(qbankbackurl);
        location.href = qbankbackurl;
        return;
    }

    var courseId = $("#courseId").val();
    var classId = $("#classId").val();
    var cpi = $("#cpi").val();
    var openc = $("#openc").val() || '';
    if(typeof(cpi)=="undefined"){
        cpi = 0;
    }
    var examsystem=$("#examsystem").val();
    location.href =  _HOST_CP2_ + "/mooc2/exam/exam-list?clazzid="+classId+"&courseid=" + courseId +"&cpi=" +cpi+ "&ut=s"  +
        "&examsystem=" + examsystem + "&openc=" + openc;
}


function sortMultiAnswer(answer) {
    if ( !answer || answer.trim().length == 0) {
        return "";
    }
    var answerArray = answer.trim().split('');
    var sortedAnswerArray = answerArray.sort();
    return sortedAnswerArray.join('');
}

function addEvaluationChoice(obj,selectNum) {
    var subObj = $(obj).find(".num_option_dx");
    var qid = $(subObj).attr("qid");
    
    if(!subObj.hasClass('check_answer_dx')){
    	var checkedNum = $('.choice' + qid + '.check_answer_dx').length;
    	selectNum = selectNum || 0;
    	if(selectNum > 0 && parseInt(checkedNum) >= parseInt(selectNum)){
    		  $.toast({type: 'notice', content: '最多选' + selectNum + '项'});
    		return false;
    	}
    }
    
    if($(subObj).hasClass("check_answer_dx")) {
        $(subObj).removeClass("check_answer_dx");
    } else {
        $(subObj).addClass("check_answer_dx");
    }

    var choiceContent = "";
    $(".choice" + qid).each(function(){
        if($(this).hasClass("check_answer_dx")){
            choiceContent = choiceContent + $(this).attr("data");
        }
    });
    $("#answer" + qid).val(choiceContent);
    return true;
}

function unhtml(input) {
    if(!input || input.length == 0) {
        return input;
    }
    var newInput=input.replace(/[&<">']/g, function (a, b) {
        return {
            '<':'&lt;',
            '&':'&amp;',
            '"':'&quot;',
            '>':'&gt;',
            "'":'&#39;'
        }[a];
    }) ;
    return newInput;
}

function timOverconfirmCloseCallBack(){
	jumpExamLook();
  	 $("#timeOverSubmitConfirmPop").fullFadeOut();
  }


function checkRemainTime(status){
	if(status == 'hidden'){
		 window.Leave_Exam_Page = new Date().getTime();
		 window.Leave_SingleQuesLimitTime = window.SingleQuesLimitTime || -1;
	}else if(status == 'visible'){
		window.Back_Exam_Page = new Date().getTime();
	}
	var leaveTime = window.Leave_Exam_Page || 0;
	var backTime = window.Back_Exam_Page || 0;
	var threshold = 1 * 60 * 1000;
	if(leaveTime > 0 && backTime > 0 && (backTime - leaveTime) >=  threshold){
		window.checkSingleQuesLimitTimeRemainTime && checkSingleQuesLimitTimeRemainTime();
		fireCheckRemainTime();
	}
}

function fireCheckRemainTime() {
	var formParams = $("#submitTest").serialize();
	$.ajax({
		type : 'post',
		url : _HOST_CP2_ + '/mooc2/exam/check-remaintime',
		data : formParams,
		dataType : 'json',
		success : function(result) {
			delete window.Leave_Exam_Page;
			delete window.Back_Exam_Page;
			delete window.Leave_SingleQuesLimitTime;
			var status = result.status;
			var seconds = result.data;
			if (!status || !seconds || seconds < 1) {
				return;
			}
		    clearInterval(timers);
			maxtime = seconds;
			timers = setInterval("CountDown()",1000);
		}
	});
}

function validateAudioPlayTimes(frameElement) {
	var frameElementObj = $(frameElement);
	var mid = frameElementObj.attr('mid') || '';
	var objectid = frameElementObj.attr('data') || '';
	var playtimeslimit = frameElementObj.attr('playtimeslimit') || 0;
	if(mid == '' || objectid == '' || playtimeslimit  <= 0){
		return;
	}
	var quesId = $(frameElement).parents('.singleQuesId').attr('data') || '';
	var ajax_url = _HOST_CP2_ + '/exam/test/audio-playtimes?qid=' + quesId  + '&mid=' + mid + '&objectid=' + objectid + '&times=' + playtimeslimit ;
	var ajax_type = "post"; 
	var ajax_data = $("#submitTest").serialize(); 
    $.ajax({
		type : ajax_type,
		url : ajax_url,
		data :ajax_data,
		dataType: "json",
		success : function(result){
			var status = result.status;
			if(status == 0){
				frameElement.contentWindow.stopAudioPlay();
				$('.audioLimitTimesTip span').text(playtimeslimit);
				$("#audioLimitTimesWin").fullFadeIn();

			}
		}
	});
}


//关闭考试监控项
function closeMonitor(){
	closeExamClientFaceMonitor();
	closeExamClientScreenCutting();
	closeExamClientScreenAndCapture();
	closeAttatchPreviewWinTab();
}

//关闭考试附件预览标签页
function closeAttatchPreviewWinTab(){
	if(window.cef && typeof (window.cef.ExamEnd) == 'function') {
		window.cef.ExamEnd();
	}
}

//调起客户端切屏协议
function openExamClientScreenCutting() {
	var pcclientSwitchout = $('#pcclientSwitchout').val();
	if (pcclientSwitchout == 1 && window.cef && typeof (window.cef.OpenScreenCutting) == 'function') {
		window.CLIENT_WEB_LIFECYCLE = function(data) {

			var status = data.status;
			if(status == 0){
				 window.Client_Leave_Exam_Time = new Date().getTime();
			}else if(status == 1){
				window.Client_Back_Exam_Time = new Date().getTime();
			}
			var outTime = window.Client_Leave_Exam_Time || 0;
			var backTime = window.Client_Back_Exam_Time || 0;
			if(backTime <= 0 || outTime <= 0){
				return;
			}
			var duration = backTime - outTime;
			if(duration <= 0){
				return;
			}
			var thresholdTime = parseInt($('#switchScreenThresholdTime').val()) || 1;
			if(parseInt(duration/1000) < parseInt(thresholdTime)){
				return;
			}

			if ($('#switchScreenControl').val() == 1) {
				switchScreenLog(backTime,outTime,duration,status);
			}

			pcExamClientSwitchScreenControl(backTime,outTime,duration,status);
		};
		var paramObj = {"is_open" : 1};
		window.cef.OpenScreenCutting(JSON.stringify(paramObj));
	}
}
//关闭客户端切屏协议
function closeExamClientScreenCutting() {
	if (window.cef && typeof (window.cef.OpenScreenCutting) == 'function') {
		var paramObj = {"is_open":0};
		window.cef.OpenScreenCutting(JSON.stringify(paramObj));
	}
}

//调起人脸抓拍协议
function openExamClientFaceMonitor(monitorOp, monitorStatus, funconfig) {
	var snapshotMonitor = $('#snapshotMonitor').val();
	if (snapshotMonitor == 1 && window.cef && typeof (window.cef.OpenFaceMonitor) == 'function') {
		window.CLIENT_FACE_COLLECTION = function(data){
			snapshotMonitorLog(data);
		};
		if (monitorOp > 0) {
			var paramObj = {"enable" : "1","internalTime" : monitorStatus,"funconfig" : funconfig};
			window.cef.OpenFaceMonitor && window.cef.OpenFaceMonitor(JSON.stringify(paramObj));
		} else if (monitorOp == 0) {
			closeExamClientFaceMonitor();
		}
	}
}
//关闭人脸监控
function closeExamClientFaceMonitor(){
	var snapshotMonitor = $('#snapshotMonitor').val();
	if(snapshotMonitor == 1 && window.cef && typeof (window.cef.OpenFaceMonitor) == 'function') {
		var paramObj = {"enable" : "0","internalTime" : "-1","funconfig" : ""};
		window.cef.OpenFaceMonitor && window.cef.OpenFaceMonitor(JSON.stringify(paramObj));
	}
}

//调起屏幕抓拍协议
function openExamClientScreenAndCapture(monitorOp, monitorStatus, funconfig) {
	//var screenshotTime = screenshotTime || 0;
	$('#screenAndCaptureCall').val(1);
	if (window.cef && typeof (window.cef.ScreenAndCapture) == 'function') {
		$('#screenAndCaptureCall').val(2);
		window.CLIENT_SNAP_SHOT = function(data){
			clientSnapShotLog(data);
		};
		if (monitorOp > 0) {
			$('#screenAndCaptureCall').val(3);
			var paramObj = {"enable" : 1,"internal" : monitorStatus,"funconfig" : funconfig};
			
			var snapshotIntervalMin = $('#snapshotIntervalMin').val() || 0;
			var snapshotIntervalMax = $('#snapshotIntervalMax').val() || 0;
			if(snapshotIntervalMin > 0 && snapshotIntervalMax > 0){
				paramObj.controlType = "1";
				paramObj.startCapture = "0";
				paramObj.random = {"randomMin":snapshotIntervalMin,"randomMax":snapshotIntervalMax};
			}	
			
			paramObj = supportCsUploadSwitch(paramObj);
			window.cef.ScreenAndCapture && window.cef.ScreenAndCapture(JSON.stringify(paramObj));
			$('#screenAndCaptureCall').val(4);
		} else if (monitorOp == 0) {
			closeExamClientScreenAndCapture();
			$('#screenAndCaptureCall').val(0);
		}
	}
}

//关闭屏幕抓拍
function closeExamClientScreenAndCapture(){
	if(window.cef && typeof (window.cef.ScreenAndCapture) == 'function') {
		var paramObj = {"enable" : 0,"internal" : 0,"funconfig" : ""};
		window.cef.ScreenAndCapture && window.cef.ScreenAndCapture(JSON.stringify(paramObj));
	}
}

//客户端退出考试答题页面
function examClientExitTest(qbankbackurl){
	submitForm(true, false, function(data) {
		closeMonitor();
		location.href = decodeURIComponent(qbankbackurl);
	});
}



function editorPaste(o, html) {
	html.html = "";
	$.toast({type: 'failure', content: '只能录入不能粘贴!'});
	return false;
}

//function initEditor(width, height, editorId) {
//	var option = {
//		'initialFrameWidth' : 800,
//		'initialFrameHeight' : 150,
//		'pasteplain' : true
//	};
//	if (width && width > 0) {
//		option.initialFrameWidth = width;
//	}
//	if (height && height > 0) {
//		option.initialFrameHeight = height;
//	}
//	var editor = UE.getEditor(editorId, option);
//	var allowPaste = $('#allowPaste').val();
//	if (allowPaste == 0) {
//		editor.addListener('beforepaste', editorPaste);
//	}
//}

function replaceAttachPreviewPath() {
	$('a[href*="/ueditorupload/read"]').each(function() {
		var href = $(this).attr('href') || '';
		href = href.replace('/ueditorupload/read', '/examattach/read');
		$(this).attr('href', href);
	});
	window.ATTACH__NO_DOWNLOAD_PATH = '/examattach/read';
}

$(document).ready(function() {
	var allowDownloadAttachment  =	$("#allowDownloadAttachment").val();
	if (!(typeof allowDownloadAttachment != "undefined" && allowDownloadAttachment == "1")) {
		replaceAttachPreviewPath();
	}
	removeImageTitle();
});


function callback_exam(obj) {
	if(window.Exam_Brower_Back){
		return;
	}
	var winId = "multiTerminalWin";
	if ($('#' + winId).is(':visible')) {
		return;
	}
	var secondParam = false;
	var firstVisibleSaveBtn = $('.saveButtonClass:visible').first();
	if (firstVisibleSaveBtn.length == 1) {
		var dataId =firstVisibleSaveBtn.attr("dataid");
		secondParam = $("#sigleQuestionDiv_" + dataId);
	}
	
	var refreshPage = function(){
		var url = window.location.href;
		if (url && url.indexOf('tag=1') != -1) {
			url = url.replace('tag=1', 'tag=0');
			window.location.href = url;
		}else{
			window.location.reload(true);
		}
	};

	var confirmFunction = function() {
		submitForm(true, secondParam, function() {
			refreshPage();
		});
	};
	var cancelFunction = function() {
		submitForm(true, secondParam, function() {
			if($('#isChaoxingExamPc').val() == 'true'){
				  closeMonitor();
				  location.href = examNotesUrl();

			}else{
				window.close();
				closeMonitor();
				refreshPage();
			}
	   });
   };
		
	var confirmBtn = $('#' + winId).find('.confirmClose');
	var cancelBtn = $('#' + winId).find('.cancel')
	confirmBtn.off('click');
	cancelBtn.off('click');
	confirmBtn.on('click', confirmFunction);
	cancelBtn.on('click', cancelFunction);
	var message = obj.mes;
	$('#' + winId).find('.popWord').html(message);
	$("#" + winId).fullFadeIn();
	frozenTestStatus();
}


function examNotesUrl(){
	var courseId = $('#courseId').val();
	var examRelationId = $('#testPaperId').val();
	var clazzId = $('#classId').val();
	var  url = _HOST_CP2_ + '/exam/test/examcode/examnotes?examId=' + examRelationId + '&courseId=' + courseId + '&classId=' + clazzId;
	
	var examsystem = $("#examsystem").val() || 0;
	if(examsystem == 1){
		  url = url + "&examsystem=" + examsystem;
	}

    var qbanksystem =  $('#qbanksystem').val();
    var qbankbackurl =  $('#qbankbackurl').val();
    if(qbanksystem == 1 && qbankbackurl != ''){
    	url = url +  '&qbanksystem=' + qbanksystem + '&qbankbackurl=' + qbankbackurl;
    }
    return url;
}

function frozenTestStatus(){
	clearInterval(timers);
}


function jumpExamLook(){
	
	var courseId = $('#courseId').val();
	var examRelationId = $('#testPaperId').val();
	var testUserRelationId = $('#testUserRelationId').val();
	var clazzId = $('#classId').val();
	var cpi = $('#cpi').val();
	
    var url =_HOST_CP2_ + '/exam/test/look?courseId=' + courseId + '&classId=' + clazzId + '&examId=' +  examRelationId + '&examAnswerId='+ testUserRelationId + '&cpi=' + cpi;
    
    var examsystem = $("#examsystem").val() || 0;
    if(examsystem == 1){
	  url = url + "&examsystem=" + examsystem;
    }

	 var qbanksystem =  $('#qbanksystem').val();
	 var qbankbackurl =  $('#qbankbackurl').val();
	 if(qbanksystem == 1 && qbankbackurl != ''){
		 url += '&qbanksystem=' +  qbanksystem  +  '&qbankbackurl=' +  qbankbackurl; 
	 }
	 
	 var webSnapshotMonitor = $('#webSnapshotMonitor').val();

	 if(webSnapshotMonitor == 1){
		 parent.window.location.href = url;
	 }else{
		 window.location.href = url;
	 }
}


//网页考试客户端监听网络变化
$(window).load(function() {
	var userAgent = navigator.userAgent || '';
	var webExamClientKey = 'chaoxingExamPc';
	if(userAgent && userAgent.indexOf(webExamClientKey) != -1){
		$(window).on('online', function() {
			$.toast({type : 'success',content : '网络状态已连接'});
		});
		$(window).on('offline', function() {
			$.toast({type : '', content : '网络异常，请检查网络连接'});
		});
	}
});


function removeImageTitle(){
	$('.TiMu img').each(function(){
		$(this).removeAttr('title');
	});
}

function feedback(){

	var content = $("#feedbackReason").val()
	var clazzId = $("#classId").val()
	var examId = $("#testPaperId").val()
	var examCreaterId = $("#examCreateUserId").val()
	var enc = $("#feedbackEnc").val()
	if (typeof content == "undefined" || content == "") {
		$.toast({type : 'notice', content : I18N.feedbackEmpty});
		return;
	}
	if (content.length > 500) {
		content = content.substring(0, 500);
	}

	$.ajax({
		type : "post",
		url : "/keeper/feedback/addtopic",
		data : {
			content:content,
			clazzId:clazzId,
			examId:examId,
			examCreaterId:examCreaterId,
			content:content,
			enc:enc
		},
		success : function(data) {
			if (data.status) {
				$.toast({type : 'success', content : I18N.feedbackSuccess});
				$('#rebackPop').fullFadeOut();
			} else {
				$.toast({type : 'notice', content : data.msg});
			}
		}
	});
}


function supportCsUploadSwitch(options) {
	if (!options) {
		options = {};
	}
	try {
		var uploadParams = {};
		var uploadConfig = {};
		var uploadUrl = $("#workExamUploadUrl").val();
		var uploadCrcUrl = $("#workExamUploadCrcUrl").val();
		if (typeof uploadUrl != "undefined" && uploadUrl != "") {
			uploadConfig.uploadUrl = uploadUrl;
		}
		if (typeof uploadCrcUrl != "undefined" && uploadCrcUrl != "") {
			uploadConfig.uploadCrcUrl = uploadCrcUrl;
		}
		var uploadtype = 'examkeeper';
		if (typeof uploadUrl != "undefined" && uploadUrl != "") {
			uploadConfig.uploadUrl += "?uploadtype=" + uploadtype;
			options.uploadConfig = uploadConfig;
		} else {
			uploadParams.uploadtype = uploadtype;
			options.uploadParams = uploadParams;
		}
	} catch (err) {}
	return options;
}


$(document).ready(function(event) {
	try {
		var examWaterMark = $('#ExamWaterMark').val();
		if(!examWaterMark){
			return;
		}
		setTimeout(function(){
			watermark({"watermark_txt" : examWaterMark});
		},5);
	} catch (err) {}
});


function exitCount(status,callBack,backTime,outTime) {
	var exitbtime = backTime || 0;
	var exitotime = outTime || 0;
	var exitdtime =  parseInt((exitbtime - exitotime) / 1000);
	if(exitdtime > 0){
		$('#exitdtime').val(exitdtime);
	}else{
		$('#exitdtime').val(0);
	}
	var answerId = $("#testUserRelationId").val();
	var classId = $("#classId").val();
	var et = $('#exitdtime').val();
	var url = _HOST_CP2_ + '/mooc2/exam/exit-count?classId=' + classId + "&testUserRelationId=" + answerId + "&status=" + status + "&et=" + et;
	var data = $("#submitTest").serialize(); // 表单数据
	$.ajax({
		type : 'post',
		url : url,
		data : data,
		dataType : 'json',
		success : function(data) {
            if(data && data.status){
            	callBack && callBack(data);
            }
		}
	});
}

function exitCountAndExitTip(status,data){
	 var  callBack = function(data){
		var submitStyle = data.submitStyle || 0;
		var exitTimes = data.exitTimes || 0;
		if(submitStyle && (submitStyle == 5 || submitStyle == 8)){
			$('#switchScreenPop').fullFadeOut();
			closeMonitor();
			finalSubmitExamLog({"submitStyle" : submitStyle});
			if(submitStyle == 5){
				exitForceSubmitTip(exitTimes);
			}else if(submitStyle == 8){
				switchScreenDurationLimitTip($('#switchScreenDurationLimit').val() || 0);
			}

		}
	};
	exitCount(status,callBack,data.backTime,data.outTime);
}

function exitForceSubmitTip(exitTimes) {
	var seconds = 5;
	var popWord = $('#exitTimesSubmitPop .popWord').attr('data');
	popWord = popWord.replace('{1}',exitTimes);
	$('#exitTimesSubmitPop .popWord').html(popWord);
	
	var confirmCloseBtn = $('#exitTimesSubmitPop .confirmClose');
	var confirmClose = confirmCloseBtn.attr('data');
	confirmCloseBtn.html(confirmClose  +'（' + seconds + "s" + '）');
	
	var okCallBack =  function(){
		jumpExamLook();
		$('#exitTimesSubmitPop').fullFadeOut();
	};
    
	confirmCloseBtn.off('click');
	confirmCloseBtn.on('click',okCallBack);
	 $('#exitTimesSubmitPop').fullFadeIn();
	var timer = setInterval(function() {
		seconds--;
		$('#exitTimesSubmitPop .confirmClose').html(confirmClose +'（' + seconds + "s" + '）');
		if (seconds == 1) {
			clearInterval(timer);
			okCallBack();
		}
	}, 1000);
}

function switchScreenDurationLimitTip(durationLimit) {
	var seconds = 5;
	var popWord = $('#exitDurationSubmitPop .popWord').attr('data');
	popWord = popWord.replace('{1}',durationLimit);
	$('#exitDurationSubmitPop .popWord').html(popWord);
	
	var confirmCloseBtn = $('#exitDurationSubmitPop .confirmClose');
	var confirmClose = confirmCloseBtn.attr('data');
	confirmCloseBtn.html(confirmClose  +'（' + seconds + "s" + '）');
	
	var okCallBack =  function(){
		jumpExamLook();
		$('#exitDurationSubmitPop').fullFadeOut();
	};
	
	confirmCloseBtn.off('click');
	confirmCloseBtn.on('click',okCallBack);
	$('#exitDurationSubmitPop').fullFadeIn();
	var timer = setInterval(function() {
		seconds--;
		$('#exitDurationSubmitPop .confirmClose').html(confirmClose +'（' + seconds + "s" + '）');
		if (seconds == 1) {
			clearInterval(timer);
			okCallBack();
		}
	}, 1000);
}


 function isPromiseAsyncAwaitSupport() {
    	var func;
    	try {
    		if(typeof(Promise) != 'function'){
    			return false;
    		}
    		eval("func = async function(){};");
    	} catch (e) {
    		return false;
    	}
	    return Object.getPrototypeOf(func).constructor != null;
}


function webSnapshotMonitorAction(){
	  var isChaoxingExamPc = $('#isChaoxingExamPc').val() || '';
	  if(isChaoxingExamPc == 'true'){
		  return;
	  }
	  var webSnapshotMonitor = $('#webSnapshotMonitor').val() || 0;
	  if(webSnapshotMonitor != 1){
		  return;
	  }
	  if(!isPromiseAsyncAwaitSupport()){
		  $.toast({type : 'failure', content : '当前浏览器版本过低（不支持监考），请升级当前浏览器到最新版本或切换使用其他浏览器',time: 5000});
	      return;
       }

	  $.ajax({
		  type: 'GET', 
		  url: _HOST_CP2_ + '/mooc2/js/exam/webmonitor.js?v=2024-0109-1606',
		  dataType: 'script',
		  cache: true,
		  success:  function() {
			    webMonitorStart();
	      }
	 });

	  /*
      $.getScript(_HOST_CP2_ + '/mooc2/js/exam/webmonitor.js', function() {
    	   webMonitorStart();
      });
      */
}

$(function(){
	webSnapshotMonitorAction();
})


function submitCheckRemainTime(data){
	if(!data){
		return;
	}
	var realRemainTime = data.realRemainTime;
	if(!realRemainTime || realRemainTime <= 0){
		return;
	}
	var threshold = 30 ;
	if(maxtime >= 0 && realRemainTime > 0 && Math.abs(maxtime - realRemainTime) >= threshold){
		clearInterval(timers);
		maxtime = realRemainTime;
		timers = setInterval("CountDown()", 1000);
	}
}

function wordMinMaxNumOption(_ueOption,_wordMinNum,_wordMaxNum, type){
	var ueOption = _ueOption;
	if(!ueOption){
		ueOption = {'pasteplain':true};
	}
	var wordCount = false;
	var wordMinNum = _wordMinNum || 0;
	var wordMaxNum = _wordMaxNum || 0;
	 if(wordMinNum && wordMinNum > 0){
		ueOption.minimumWords = wordMinNum;
		wordCount = true;
	}
	if(wordMaxNum && wordMaxNum > 0){
		ueOption.maximumWords = wordMaxNum;
		wordCount = true;
	}
	if(wordCount){
	   if(wordMaxNum == 0){
		   ueOption.maximumWords = 0;
	   }
	   ueOption.wordCount = true;
	   ueOption.wordCountTimer = false;
	}
	if (type == 26) {
		var toolbar = ['removeformat', 'formatmatch', 'paragraph',
				'fontfamily', 'fontsize', 'bold', 'italic',
				'underline', 'forecolor', 'indent',
				'justifyleft', 'justifycenter', 'justifyright',
				'inserttable','latex'];
		var toolbars = window.UEDITOR_CONFIG.toolbars[0] || [];
		if (toolbars.includes("insertimage")) {
			toolbar.push('insertimage')
		}
		ueOption.toolbars = [toolbar];
	}
	return ueOption;
}

function checkControlWordMax(ueditor,questionType){
	if(!ueditor){
    	return;
    }
	if(questionType == 4 || questionType == 5 || questionType == 6 || questionType == 7 || questionType == 8 || questionType == 18 ){
        var textarea = $(ueditor.iframe).parents('.subEditor').find('textarea');
        var wordMaxNum = textarea.attr('wordmaxnum') || 0;
        if(wordMaxNum > 0){
        	controlWordMax(ueditor,wordMaxNum);
	   }
 	}
}

function initWordMaxMiddleContainer(){
	if($('#wordMaxMiddleContainer').length == 1){
		return;
	}
	var ele = '<div style="display:none;"><textarea  id="wordMaxMiddleContainer"></textarea></div>';
	$('body').append(ele);
	UE.getEditor('wordMaxMiddleContainer',{'pasteplain':true});
}

function controlWordMax(ueditor,wordMaxNum) {
	    if(!ueditor || !wordMaxNum || wordMaxNum <= 0){
	    	return;
	    }
        var words = ueditor.pureWord();
        var wordsCount = words.length;
        if (wordsCount > wordMaxNum) {
            var keyWord = words[wordMaxNum - 1];
            var match = [];
            var richContent = ueditor.getContent();
            var index = richContent.indexOf(keyWord);
            var cycleSafeLimit = 6000;
            while (index !== -1 && match.length <= cycleSafeLimit) {
                match.push(index + keyWord.length);
                index = richContent.indexOf(keyWord, index + keyWord.length);
            }
            if(match.length > 0){
	            for (var i = match.length - 1; i >= 0; i--) {
	                var subRichContent = richContent.substring(0, match[i]);
	                var middleContainer = UE.getEditor('wordMaxMiddleContainer');
	                middleContainer.setContent(subRichContent);
	                if (middleContainer.pureWordCount() <= wordMaxNum) {
	                    break;
	                }
	            }
            }else{
            	var plainTxt = ueditor.getPlainTxt();
				if(plainTxt){
					plainTxt = plainTxt.replace(/<[^>]+>/g,'');
			    }
            	var plainTxtWords = plainTxt.split(' ');
            	var subRichContent = plainTxtWords.slice(0, wordMaxNum).join(' ');
            	var middleContainer = UE.getEditor('wordMaxMiddleContainer');
                middleContainer.setContent(subRichContent);
            }
            if(middleContainer.getContent() != ueditor.getContent()){
              ueditor.setContent(middleContainer.getContent());
              ueditor.focus(true);
            }
        }
}


$(document).ready(function(){if(window.eHook && typeof(window.changeTime) == 'function'){window.changeTime = function(){};}});

var secondDeviceClickFlag = false;
function secondDeviceLiveAction(showType) {
    if (secondDeviceClickFlag) {
        return;
    }
    secondDeviceClickFlag = true;
    setTimeout(function () {
        secondDeviceClickFlag = false;
    }, 2000);
    var clazzId = $("#classId").val();
    var examId = $("#testPaperId").val();
    var personId = $('#cpi').val();
    var bigRefreshCode = _HOST_CP2_ + '/css/phone/images/big-refreshcode.png';
    var retryRereshClass = 'retryReresh';
    var successProcess = function(data, showType) {
        var studentCode = data.studentCode;
        var loginCode = data.loginCode;
        var liveUrlQrCode = data.liveUrlQrCode;
        if (showType == 0) {
            var context = '<p>' + I18N.liveAccount + '：' + studentCode + '</p><p>' + I18N.passwordI18N + '：' + loginCode + '</p>'
            $(".liveBox").html("");
            $(".liveBox").html(context);
        } else {
            $("#loginName").html(studentCode);
            $("#password").html(loginCode);
            $("#ewmUrl").attr("src", liveUrlQrCode);
            $("#ewmUrl").attr("onclick", "");
            $("#showLoginInfo").fullFadeIn();
        }
    }

    var failProcess = function(showType) {
        if (showType == 1) {
            $('#ewmUrl').attr('src', bigRefreshCode);
            $('#ewmUrl').addClass(retryRereshClass);
            $("#showLoginInfo").fullFadeIn();
        } else {
            $.toast({type: 'failure', content: '操作失败'});
        }
    }
    var url = '/keeper/live/another-device/info?clazzId=' + clazzId + '&examId=' + examId + '&personId=' + personId;
    $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        success: function (result) {
            if (result.status) {
                successProcess(result.data, showType);
            } else {
                failProcess(showType);
                $.toast({
                    type: 'failure',
                    content: result.msg
                });
            }
        },
        error: function () {
            failProcess(showType);
        }
    });
}

function rereshSecondDeviceQRCode() {
    if($('#ewmUrl').hasClass('retryReresh')){
        secondDeviceLiveAction(1);
        return;
    }
}


function loadConversationTeachers(){

	var classId =  $('#classId').val();
	var testPaperId =  $('#testPaperId').val();
	var cpi =  $('#cpi').val();
	var url = '/keeper/voice/teachers?clazzId=' + classId + '&examId=' + testPaperId + '&personId=' + cpi;
	$.ajax({
		url: url,
		type: 'get',
		dataType: 'json',
		success: function (result) {
			if (result.status) {
				successProcess(result.data);
			} else {
				$.toast({
					type: 'failure',
					content: result.msg
				});
			}
		},
		error: function () {}
	});

	function successProcess(data){
		var template = $('#conversationTpl').jqote({"data": data});
		$('#conversationList ul').html(template);
		checkOnlineStatus(data);
	}

	function checkOnlineStatus(data){
		if(typeof(jsBridge) == 'undefined'){
			return;
		}
	    //jsBridge.unbind('EXAM_CLIENT_TEACHER_ONLINE_STATE');
        jsBridge.bind('EXAM_CLIENT_TEACHER_ONLINE_STATE', function (object) {
    	   var uid = object.uid;
    	   var online = object.online;
    	   if(online){
    	     $('#conversation_' + uid).removeClass('offline');
            }
       });

		var remoteUsers = [];
		$(data).each(function(index,obj){
			var uid = obj.userId;
			var imUserName = obj.imUsername;
			var item = {"uid":uid,"im_username":imUserName};
			remoteUsers.push(item);
		});
		var param = {"remoteUsers":remoteUsers};
		jsBridge.postNotification("EXAM_CLIENT_TEACHER_ONLINE",param);
	}
}

function conversationAction(obj){
	if(typeof(jsBridge) == 'undefined'){
		return;
	}
	var liEle  = $(obj).parent();
	var data = JSON.parse(decodeURIComponent(liEle.attr('data')));
	var appId = data.appId;
	var token = data.token;
	var channelId = data.channel;
	var uid = data.userId;
	var username = data.username;
	var avatar = data.avatar;
	var im_username = data.imUsername;
	var param = {"appid":appId,"token":token,"channelId":channelId, remoteUser:{"uid":uid,"username":username,"pic":avatar,"im_username":im_username}};
	jsBridge.postNotification("EXAM_CLIENT_START_VOICE_CALL", param)
}


function openConversationList(){
	   loadConversationTeachers();
	   $('#rebackPop').fullFadeOut();
	   $('#conversationList').fullFadeIn();
}



function checkSwitchScreenSubmit(){

	function checkSwitchScreenNumberLimit(event) {
		var switchScreenNumberLimit = $('#switchScreenNumberLimit').val() || 0;
		if (!switchScreenNumberLimit || switchScreenNumberLimit <= 0) {
			return;
		}
		var exitCount = $('#exitCount').val() || 0;
		if (parseInt(exitCount) >= parseInt(switchScreenNumberLimit)) {
			$('#monitorforcesubmit').val(5);
			submitForm(false, false);
		}
	}

   function checkSwitchScreenDurationLimit(event) {
		var switchScreenDurationLimit = $('#switchScreenDurationLimit').val() || 0;
		if (!switchScreenDurationLimit || switchScreenDurationLimit <= 0) {
			return;
		}
		var exitDuration = $('#exitDuration').val() || 0;
		if (parseInt(exitDuration) > parseInt(switchScreenDurationLimit)) {
			$('#monitorforcesubmit').val(8);
			submitForm(false, false);
		}
	}
   $(document).ready(function(){
		checkSwitchScreenNumberLimit();
		checkSwitchScreenDurationLimit();
   });
}



//电脑考试客户端切屏控制
function pcExamClientSwitchScreenControl(backTime,outTime,duration,status){

	var switchScreenNumberLimit = $('#switchScreenNumberLimit').val() || 0;
	var switchScreenDurationLimit = $('#switchScreenDurationLimit').val() || 0;
	if(switchScreenNumberLimit == 0 &&  switchScreenDurationLimit == 0){
		return;
	}

	var dateStr =  new Date(outTime).toString('yyyy-MM-dd HH:mm:ss');
	var tip = I18N.notLeaveTip1+ " " + dateStr + " " +I18N.notLeaveTip2;
	$('#switchScreenPop .popWord').html(tip);
	$('#switchScreenPop').fullFadeIn();

	var data = {
			'backTime' : backTime,
			'outTime' : outTime,
			'duration' : duration
	};
	exitCountAndExitTip(status,data);
}


$(function(){
	 var isChaoxingExamPc = $('#isChaoxingExamPc').val() || '';
	  if(isChaoxingExamPc == 'true'){
		  checkSwitchScreenSubmit();
	  }
});



function listenXiaMenExamTeacherNotice(){
	var clazzId = $('#classId').val();
	var examId = $('#testPaperId').val();
	var personId = $('#cpi').val();
	var ajax_data = {
			"clazzId":clazzId,
			"examId": examId,
			"personId":personId
	};
	 $.ajax({
          type : 'get',
          url : '/keeper/api/notice/unread',
          data : ajax_data,
          dataType : 'json',
          success : function(result) {
              var status = result.status;
              if(status){
            	  var data = result.data;
            	  if(!data || data.length == 0){
            		  return;
            	  }
            	  var msg = [];
            	  $(data).each(function(index,obj){
            		  msg.push(obj.msgContent);
            	  });
      			 $('#teacherNoticePop .popWord').html(msg.join('<br/>'));
                 $("#teacherNoticePop").fullFadeIn();
              }
          },
          complete: function(){
        	  setTimeout(function(){
        		  listenXiaMenExamTeacherNotice();
        	  },3000)
          }
	 });
}

$(function(){
	 var isChaoxingExamPc = $('#isChaoxingExamPc').val() || '';
	  var xiaMenUniversity = $('#xiaMenUniversity').val() ||  0;
	  if(isChaoxingExamPc == 'true' && xiaMenUniversity == 1){
		  listenXiaMenExamTeacherNotice();
	  }
});

function openCalculate() {
	if($('.calculatorcon').length == 0){
		var calculatorcon = '<div class="calculatorcon"><iframe height="100%" width="100%" frameborder="0" src="/exam-ans/mooc2/js/editor/dialogs/calculator/index.html?source=1"></iframe></div>';
		$('.counter_icon').before(calculatorcon);
	}
}

function getFillinBlanksNode(node) {
    while(node) {
        if (node.dataset && node.dataset.drop) {
            return node
        }
        node = node.parentNode
    }
}

function clearFillinBlanksStyle() {
    for (var i = 0; i <$('.drop-over').length ; i++) {
        $('.drop-over')[i].classList.remove('drop-over')
    }
}


$(document).ready(function preventQuesChoiceALink(event) {
	$('.stem_answer a').on('click', function(event) {
		var javascriptStr = 'javascript';
		var href = $(this).attr('href') || javascriptStr;
		if (href.indexOf(javascriptStr) != 0) {
			event.preventDefault();
		}
	});
});

function initMaxWordQuestionType26(questionContent, id, minNum, maxNum) {
    var count = UE.Editor.prototype.pureWordCount(questionContent);
    if (Number(minNum) > 0 && count < minNum) {
        $("#tips" + id).hide()
        $("#errorTips" + id).show()
        $("#errorfontnum" + id).html(minNum - count)
    } else {
        $("#tips" + id).show()
        $("#errorTips" + id).hide()
    }

    if (Number(maxNum) > 0 && count > maxNum) {
        count = maxNum;
    }

    $("#fontnum" + id).html(count)
}

// 纯文本截取
function controlWordMaxTextArea(richContent,wordMaxNum) {
    if(!richContent || !wordMaxNum || wordMaxNum <= 0){
        return "";
    }
    var words = UE.Editor.prototype.pureWord(richContent);
    var wordsCount = words.length;
    if (wordsCount > wordMaxNum) {
        var keyWord = words[wordMaxNum - 1];
        var match = [];
        var index = richContent.indexOf(keyWord);
        var cycleSafeLimit = 6000;
        while (index !== -1 && match.length <= cycleSafeLimit) {
            match.push(index + keyWord.length);
            index = richContent.indexOf(keyWord, index + keyWord.length);
        }
        if(match.length > 0){
            for (var i = match.length - 1; i >= 0; i--) {
                var subRichContent = richContent.substring(0, match[i]);
                var middleContainer = UE.getEditor('wordMaxMiddleContainer');
                middleContainer.setContent(subRichContent);
                if (middleContainer.pureWordCount() <= wordMaxNum) {
                    break;
                }
            }
        }else{
            var plainTxt = richContent;
            if(plainTxt){
                plainTxt = plainTxt.replace(/<[^>]+>/g,'');
            }
            var plainTxtWords = plainTxt.split(' ');
            var subRichContent = plainTxtWords.slice(0, wordMaxNum).join(' ');
            var middleContainer = UE.getEditor('wordMaxMiddleContainer');
            middleContainer.setContent(subRichContent);
        }
        if(middleContainer.getPlainTxt() != richContent){
            return middleContainer.getPlainTxt();
        } else {
            return "";
        }
    }
    return "";
}


$(document).ready(function() {
	try {
		$('textarea').on('input', function(event) {
			window.BeforeUnloadActive = true;
			editAreaTimedSave(this);
		});
		for (var item in UE.instants) {
			UE.instants[item].addListener('ready', function(){
			    var me = this;
				$(this.body).on('input', function(event) {
					window.BeforeUnloadActive = true;
					editAreaTimedSave(me.container);
				});
				 me.addListener('afterinserthtml', function(e) {
				     ueditorAttachmentSave(me);
                });
			});
		}
	}catch (err) {
	   console.log(err);
	}
});

window.BeforeUnloadActive = false;

window.addEventListener('beforeunload', function(event) {
	if($('#isChaoxingExamPc').val() == 'true'){
		return null;
	}
	if (!window.BeforeUnloadActive) {
		return null;
	}
	var closeTip =  '您的考试尚未提交，请提交或保存考试，否则系统可能不会保存您所做的更改。确定离开当前页面吗？';
	event.preventDefault();
	event.returnValue = closeTip;
	return closeTip;
});



function editAreaTimedSave(editArea) {
	try {
		if (!editArea) {
			return;
		}
		if (window.Edit_Timed_Saving) {
			return;
		}
		if (!window.Edit_Timed_Record) {
			window.Edit_Timed_Record = {};
			window.Edit_Timed_Record.start = new Date().getTime();
		} else {
			window.Edit_Timed_Record.end = new Date().getTime();
			var startTime = window.Edit_Timed_Record.start;
			var endTime = window.Edit_Timed_Record.end;
			var timedMinute = $('#examTimedSaveThreshold').val() || 1;
			var threshold = timedMinute * 60 * 1000;
			if (endTime > 0 && startTime > 0 && (endTime - startTime) >= threshold) {
				timedSaveState(true);
				var answerMode = $('#answerMode').val() || 0;
				if (answerMode == 0) {
					submitForm(true, false, false);
				} else if (answerMode == 1) {
					var questionWrap = $(editArea).parents('.questionLi');
					submitForm(true, questionWrap, false);
				}
			}
		}
	} catch (err) {}
}


function timedSaveState(state){
	if(state){
		window.Edit_Timed_Saving = true;
	}else{
		window.Edit_Timed_Saving = false;
		window.Edit_Timed_Record = false;
	}
}


$(document).ready(function() {
	if(typeof(jsBridge) == 'undefined'){
		return;
	}
	jsBridge.bind('CLIENT_WEB_NOTIFY', function(object){
	    clientWebNotifyAction(object);
	});
});

function clientWebNotifyAction(msg){
	if(!msg || msg.typeFlag != 'CX_EXAM_NOTIFY' || !msg.info){
       return;
	}
	var info = msg.info || {};
	var type = info.type;
	if(type == 'submitexam'){
		clientWebNotifySubmitExam(info.data);
		return;
	}else if(type == 'examAddTimeRemind'){
		clientWebNotifyExamAddTimeRemind(info.data);
		return;
	}
}


function clientWebNotifySubmitExam(obj){
	if(!obj){
		return;
	}
	var testUserRelationId= $('#testUserRelationId').val();
	var classId= $('#classId').val();
	if(testUserRelationId != obj.answerId || classId !=  obj.classId){
		return;
	}
	
	var callBack = function(data){
		var submitStyle = data.submitStyle;
		var tip = I18N.forceSubmitTip;
		if(submitStyle == 1){
			tip = I18N.forceSubmitStyle1Tip;
		}
		forceSubmitPopTip(tip);
	};
	
	var courseId = $('#courseId').val();
	var cpi = $('#cpi').val();
	var url =  _HOST_CP2_ + '/mooc2/exam/examsubmitstatus?courseId=' + courseId + '&classId=' + classId   + '&testUserRelationId=' + testUserRelationId + '&cpi=' + cpi;
	$.ajax({
		type : 'get',
		url : url,
		dataType : 'json',
		success : function(data) {
			var status = data.status;
			if(!status){
				return;
			}
			callBack(data);
		}
	});
}

function forceSubmitPopTip(tip) {
	var seconds = 5;
	$('#forceSubmitTip .popWord').html(tip);
	var confirmCloseBtn = $('#forceSubmitTip .confirmClose');
	var confirmClose = confirmCloseBtn.attr('data');
	confirmCloseBtn.html(confirmClose  +'（' + seconds + "s" + '）');
	
	var okCallBack =  function(){
		closeMonitor();
		jumpExamLook();
		$('#forceSubmitTip').fullFadeOut();
	};
    
	confirmCloseBtn.off('click');
	confirmCloseBtn.on('click',okCallBack);
	 $('#forceSubmitTip').fullFadeIn();
	var timer = setInterval(function() {
		seconds--;
		$('#forceSubmitTip .confirmClose').html(confirmClose +'（' + seconds + "s" + '）');
		if (seconds == 1) {
			clearInterval(timer);
			okCallBack();
		}
	}, 1000);
}


function clientWebNotifyExamAddTimeRemind(obj){
	if(!obj){
		return;
	}
	var testUserRelationId= $('#testUserRelationId').val();
	var classId= $('#classId').val();
	if(testUserRelationId != obj.answerId || classId !=  obj.classId){
		return;
	}
	examAddTimeRemindTip(obj);
	fireCheckRemainTime();
}

function examAddTimeRemindTip(obj) {
	var remind = obj.remind || '';
	var remindtpl = '';
	if(remind != '' && remind != null){
		  remindtpl = $('#examAddTimeRemindTip .remind').attr('data');
		 remindtpl =  remindtpl.replace('[1]',remind);
	}
    $('#examAddTimeRemindTip .remind').html(remindtpl);
    
	var minutes = obj.minutes || '';
	var minutestpl = '';
	if(minutes != '' && minutes != null){
		 minutestpl = $('#examAddTimeRemindTip .minutes').attr('data');
		 minutestpl =  minutestpl.replace('[1]',minutes);
	}
    $('#examAddTimeRemindTip .minutes').html(minutestpl);
	
	var seconds = 5;
	var confirmCloseBtn = $('#examAddTimeRemindTip .confirmClose');
	var confirmClose = confirmCloseBtn.attr('data');
	confirmCloseBtn.html(confirmClose  +'（' + seconds + "s" + '）');
	var okCallBack =  function(){
		$('#examAddTimeRemindTip').fullFadeOut();
	};
	confirmCloseBtn.off('click');
	confirmCloseBtn.on('click',okCallBack);
	$('#examAddTimeRemindTip').fullFadeIn();
	var timer = setInterval(function() {
		seconds--;
		$('#examAddTimeRemindTip .confirmClose').html(confirmClose +'（' + seconds + "s" + '）');
		if (seconds == 1) {
			clearInterval(timer);
			okCallBack();
		}
	}, 1000);
}

function checkUnAnswered() {
    var unAnswerTypeName = '';
    var unAnswerObj = {};
    $('.questionLi').each(function () {
        var questionWrap = $(this);
        var answerObj = getEachAnswer(questionWrap);
        var unAnsweredTypeNameStr = getUnAnsweredTypeName(questionWrap,answerObj);
        if (unAnsweredTypeNameStr && unAnsweredTypeNameStr.length > 0) {
            unAnswerObj.unAnswerTypeName = unAnsweredTypeNameStr;
            unAnswerObj.questionEle = questionWrap;
            return false;
        }
    });
    return unAnswerObj;
}

function getEachAnswer(questionWrap) {
    var answerObj = {};
    try {
        var answer = '';
        var quesId = questionWrap.find('input[name="questionId"]').val();
        var type = questionWrap.find('input[name="type' + quesId + '"]').val();
        var typeName = questionWrap.find('input[name="typeName' + quesId + '"]').val();
        answerObj.type = type;
        answerObj.typeName = typeName;
        if (type == 0 || type == 3 || type == 11 || type == 13 || type == 14 || type == 15 || type == 17 || type == 19 || type == 20 || type == 25 || type == 24) {
            answer = questionWrap.find('input[name="answer' + quesId + '"]').val();
        } else if (type == 1 || type == 21) {
            answer = questionWrap.find('input[name="answers' + quesId + '"]').val();
        } else if (type == 2 || type == 9 || type == 10) {
            var balnkAnswer = [];
            questionWrap.find('textarea[name^="answerEditor' + quesId + '"]').each(function (index, obj) {
                var item = {};
                var itemAnswer = $(this).val();
                item.name = index.toString();
                item.content = itemAnswer;
                balnkAnswer.push(item);
            });
            answer = JSON.stringify(balnkAnswer);
        } else if (type == 4 || type == 5 || type == 6 || type == 7 || type == 8 || type == 18) {
            answer = questionWrap.find('textarea[name="answer' + quesId + '"]').val()
        } else if (type == 26) {
            answer = questionWrap.find('input[name="answer' + quesId + '"]').val()
        } else if (type == 12) {
            answer = questionWrap.find('input[name="answer' + quesId + '"]').val() || questionWrap.find('input[name="answers' + quesId + '"]').val();
        }
        answerObj.answer = answer;
    } catch (err) {}
    return answerObj;
}

function getUnAnsweredTypeName(questionWrap,answerObj) {
    var unAnswerTypeName = '';
    try {
        if (!answerObj) {
            return unAnswerTypeName;
        }

        var type = answerObj.type;
        if(type == 16){
            return unAnswerTypeName;
        }

        var answer = answerObj.answer || '';

        if (answer == '' || answer.length == 0) {
            unAnswerTypeName = answerObj.typeName || '';
            return unAnswerTypeName;
        }

        var answerStatus = true;

        if (type == 0 || type == 1 || type == 3 || type == 4 || type == 5 || type == 6 || type == 7
            || type == 8 || type == 18 || type == 12 || type == 13 || type == 21) {
            if (type == 13) {
                var answerLength = answer.length;
                var realAnswer = answer.replaceAll("-", "");
                if (realAnswer.length < answerLength) {
                    answerStatus = false;
                }
            }

        } else if (type == 2 || type == 9 || type == 10 || type == 11 || type == 20 || type == 24) {
            var blankAnswer = JSON.parse(answer);
            var blankNum = blankAnswer.length;
            var unAnswerNum = 0;
            for (var i = 0; i < blankNum; i++) {
                var item = blankAnswer[i];
                if (item && (item.content == '' || item.content.length == 0)) {
                    unAnswerNum++;
                }
            }
            if (unAnswerNum > 0) {
                answerStatus = false;
            }
        } else if (type == 14) {
            var clozetextNewAnswer = JSON.parse(answer);
            if (jQuery.isArray(clozetextNewAnswer) && clozetextNewAnswer.length > 0) {
                var itemObj = clozetextNewAnswer[0];
                var unAnswerNum = 0;
                for (var key in itemObj) {
                    var answerObjItem = itemObj[key];
                    if(typeof(answerObjItem) == 'string'){
                        answerObjItem = JSON.parse(answerObjItem);
                    }
                    if (answerObjItem && (answerObjItem.answer == '' || answerObjItem.answer.length == 0)) {
                        unAnswerNum++;
                    }
                }
                if (unAnswerNum > 0) {
                    answerStatus = false;
                }
            }
        } else if (type == 15 || type == 19) {
            var readComPrehensionNewAnswer = JSON.parse(answer);
            if (jQuery.isArray(readComPrehensionNewAnswer) && readComPrehensionNewAnswer.length > 0) {
                var itemObj = readComPrehensionNewAnswer[0];

                var itemIds = [];
                questionWrap.find("input[name='readCompreHension-childType']").each(function(index){
                    var itemId = $(this).next().val();
                    itemIds.push(itemId);
                });

                for ( i = 0;  i < itemIds.length; i++) {
                    var key = itemIds[i];
                    var answerObjItem = itemObj[key];
                    if(typeof(answerObjItem) == 'string'){
                        answerObjItem = JSON.parse(answerObjItem);
                    }
                    var subType = answerObjItem.type;
                    var subAnswer = answerObjItem.answer;
                    if (subType == 0 || subType == 1 || subType == 3 || subType == 4) {
                        if (subType == 3) {
                            subAnswer = subAnswer.toString();
                        }
                        if (subAnswer == '' || subAnswer.length == 0) {
                            answerStatus = false;
                            break;
                        }
                    } else if (subType == 2) {
                        for (var j = 0; j < subAnswer.length; j++) {
                            var item = subAnswer[j];
                            if (item.content == '' || item.content.length == 0) {
                                answerStatus = false;
                                break;
                            }
                        }
                        if(!answerStatus){
                            break;
                        }
                    }
                }
                if(!answerStatus){
                    answerObj.typeName  = answerObj.typeName;
                }
            }
        }else if (type == 25) {
            var readComPrehensionNewAnswer = JSON.parse(answer);
            if (jQuery.isArray(readComPrehensionNewAnswer) && readComPrehensionNewAnswer.length > 0) {
                var itemObj = readComPrehensionNewAnswer[0];

                var itemIds = [];
                questionWrap.find("input[name='readCompreHension-childType']").each(function(index){
                    var itemId = $(this).next().val();
                    itemIds.push(itemId);
                });

                var optionalNum = questionWrap.find("input[name^='optionalNum']").val();
                var smallQuesSum = itemIds.length;
                var canUnAnswerNum = parseInt(smallQuesSum) - parseInt(optionalNum);
                var firstIndex = -1;

                for ( i = 0;  i < itemIds.length; i++) {
                    var key = itemIds[i];
                    var answerObjItem = itemObj[key];
                    if(typeof(answerObjItem) == 'string'){
                        answerObjItem = JSON.parse(answerObjItem);
                    }
                    var subType = answerObjItem.type;
                    var subAnswer = answerObjItem.answer;
                    var isAnswered = true;
                    if (subType == 0 || subType == 1 || subType == 3 || subType == 4) {
                        if (subType == 3) {
                            subAnswer = subAnswer.toString();
                        }
                        if (subAnswer == '' || subAnswer.length == 0) {
                            isAnswered = false;
                        }
                    } else if (subType == 2) {
                        for (var j = 0; j < subAnswer.length; j++) {
                            var item = subAnswer[j];
                            if (item.content == '' || item.content.length == 0) {
                                isAnswered = false;
                                break;
                            }
                        }
                    }
                    if(!isAnswered){
                        answerStatus = false;
                        if(firstIndex == -1){
                            firstIndex = i;
                        }
                        canUnAnswerNum--;
                    }
                }
                if(!answerStatus && canUnAnswerNum < 0){
                    answerObj.typeName  = answerObj.typeName;
                }else{
                    answerStatus = true;
                }
            }
        }else if (type == 17 || type == 26) {
            var procedureAnswer = JSON.parse(answer);
            if (jQuery.isArray(procedureAnswer) && procedureAnswer.length > 0) {
                var itemObj = procedureAnswer[0];
                if (itemObj.answer == '' || itemObj.answer.length == 0) {
                    answerStatus = false;
                }
            }
        }
        if (!answerStatus) {
            unAnswerTypeName = answerObj.typeName || '';
        }
    } catch (err) {}
    return unAnswerTypeName;
}


$(document).ready(function(event) {
	$('.marking_content a').each(function() {
		var href = $(this).attr('href') || '';
		if (href.indexOf('http') == 0 || href.indexOf('//') == 0) {
			$(this).attr('target','_blank');
		}
	});
});



var ueditorAnswerLocalCacheHandle = {
	    "_localCacheKey": "examUeditorAnswerLocalCache",
	    "writeLocalCache": function (ueditor) {
	        try {

	        	if(!this.enableLocalCache()){
	        		return;
	        	}
	        	
	            this.clearExamLocalCache();
	        	
        	    var answerMode = $('#answerMode').val() || 0;
	            if(answerMode == 1){
	            	return;
	            }
	            if (!window.localStorage) {
	                return;
	            }
	            if (!ueditor) {
	                return;
	            }
	            

	            var questionWrap = $(ueditor.container).parents('.questionLi');
	            var quesId = questionWrap.find('input[name="questionId"]').val();
	            var type = questionWrap.find('input[name="type' + quesId + '"]').val();
	            if (type != 4 && type != 5 && type != 6 && type != 7 && type != 8 && type != 18) {
	                return;
	            }

	            var cacheKey = this._localCacheKey;

	            var getAnswer = function () {
	               return  ueditor.getContent() ;
	            };
	            var answerStr = getAnswer();

	            if (answerStr == '' || answerStr.length == 0) {
	                return;
	            }

	            var inputLengthLimit= (Math.pow(2, 16) - 1) / 3;
	            if (answerStr.length > inputLengthLimit) {
	                return;
	            }
	
	            var  cacheStr = localStorage.getItem(cacheKey);
	            if(cacheStr == null){
	            	cacheStr = "{}";
	            }
	            var  cacheObj = JSON.parse(cacheStr);
	            
	            var key = $('#testUserRelationId').val() + "_" + $('#classId').val() + "_" + $('#answerTimes').val();

	            var quesObj = cacheObj[key];
	            if(quesObj == null || !quesObj){
	            	quesObj = {};
	            }
	
	            var quesNumLimit = 10;
	            if(quesObj[quesId] == null && Object.keys(quesObj).length >= quesNumLimit){
	            	return;
	            }

	            quesObj[quesId] = answerStr;
	            cacheObj[key] = quesObj;
	            var cacheStr = JSON.stringify(cacheObj);
	            localStorage.setItem(cacheKey, cacheStr);
	            
	        } catch (err) {
	        	console.log(err);
	        	if(this.isQuotaExceede(err)){
	              localStorage.removeItem(cacheKey);
	        	}
	       }
	    },
	    "readLocalCache": function (ueditor) {
	        try {

	        	if(!this.enableLocalCache()){
	        		return '';
	        	}
	        	
	        	this.clearExamLocalCache();
	        	
	            var answerMode = $('#answerMode').val() || 0;
	            if(answerMode == 1){
	            	return;
	            }
	            
	            if (!window.localStorage) {
	                return '';
	            }
	            
	            var questionWrap = $(ueditor.container ).parents('.questionLi');
	            var quesId = questionWrap.find('input[name="questionId"]').val();
	            var type = questionWrap.find('input[name="type' + quesId + '"]').val();
	            if (type != 4 && type != 5 && type != 6 && type != 7 && type != 8 && type != 18) {
	                return '';
	            }

	            var cacheKey = this._localCacheKey;
	            var varStr = localStorage.getItem(cacheKey);
	            if (varStr == null) {
	                return '';
	            }
	            var valObj = JSON.parse(varStr);
	            var key = $('#testUserRelationId').val() + "_" + $('#classId').val() + "_" + $('#answerTimes').val();
	            var quesObj = valObj[key];
	            if (quesObj == null || !quesObj) {
	                return '';
	            }
	            var answer = quesObj[quesId] || '';
	            return answer;
	        } catch (err) {
	        	console.log(err);
	            return '';
	        }
	    },
	    "clearQuesLocalCache": function (data) {
	    	try {
	    		 var answerMode = $('#answerMode').val() || 0;
		         if(answerMode == 1){
		            	return;
		         }
	    		
	    		if (!window.localStorage) {
	    			return;
	    		}
	    		if(!data){
	    			return;
	    		}
	    		var cacheKey = this._localCacheKey;
	    		var  cacheStr = localStorage.getItem(cacheKey);
		        if(cacheStr == null){
		            return;
		         }
		         var  cacheObj = JSON.parse(cacheStr);
		        var key = $('#testUserRelationId').val() + "_" + $('#classId').val() + "_" + $('#answerTimes').val();
		        
		        var quesObj = cacheObj[key];
	            if(quesObj == null || !quesObj){
	            	return;
	            }
	            var quesId = data.monitorparam.questionId;
	            //console.log('clearques:'+quesId);
	            
	            if(quesObj[quesId] == null){
	            	return;
	            }
	            
	            delete quesObj[quesId];
	            var newCacheStr = JSON.stringify(cacheObj);
	            localStorage.setItem(cacheKey, newCacheStr);
	    	} catch (err) {
	    		console.log(err);
	    	}
	    },
	    "clearExamLocalCache": function (current) {
	    	try {
	    		 var answerMode = $('#answerMode').val() || 0;
		         if(answerMode == 1){
		            	return;
		        }
	    		
	    		if (!window.localStorage) {
	    			return;
	    		}
	    		var cacheKey = this._localCacheKey;
	    		var  cacheStr = localStorage.getItem(cacheKey);
		        if(cacheStr == null){
		            return;
		         }
		        
		        if(current){
		        	localStorage.removeItem(cacheKey);
		        	return;
		        }
		        
		        var clearHit = false;
		         var  cacheObj = JSON.parse(cacheStr);
		        var key = $('#testUserRelationId').val() + "_" + $('#classId').val() + "_" + $('#answerTimes').val();
		        for(examKey  in cacheObj){
		        	if(examKey != key){
	                	  delete cacheObj[examKey];
	                	  clearHit = true;
	                }
		        }
		        if(!clearHit){
	            	return;
	            }
		        var newCacheStr = JSON.stringify(cacheObj);
	            localStorage.setItem(cacheKey, newCacheStr);
	    	} catch (err) {
	    		console.log(err);
	    	}
	    },
	    "checkSubmitLocalCache": function (ueditor) {
	        try {
	        	if(!this.enableLocalCache()){
	        		return ;
	        	}
        	    var answerMode = $('#answerMode').val() || 0;
	            if(answerMode == 1){
	            	return;
	            }
	            var content = this.readLocalCache(ueditor);
	            if (content == '' || content.length == 0) {
	                return;
	            }
	            ueditor.setContent(content);
	        	localCacheSaveState(true);
	            submitForm(true, false, false);
	        } catch (err) {
	        	console.log(err);
	        }
	    },
	    "isQuotaExceede": function(error){
	    	  if (error instanceof DOMException && (error.code === 22 || error.code === 1014 ||
	    			  error.name === "QuotaExceededError"  || error.name === "NS_ERROR_DOM_QUOTA_REACHED")){
	    		return true;
	    	 }
	    	 return false;
	    },
	    "enableLocalCache": function(){
	    	var enable =  $('#examLocalStorageSwitch').val()  == 1;
	    	if(!enable){
	    		 localStorage.removeItem(this._localCacheKey);
	       }
	       return enable;
	    }
 };

function localCacheSaveState(state){
	if(state){
		window.Edit_LocalCache_Saving = true;
	}else{
		window.Edit_LocalCache_Saving = false;
	}
}


function ueditorAttachmentSave(ueditor) {
	try {
		var examAttachAutoSave = $('#examAttachAutoSave').val() || 0;
		if(examAttachAutoSave != 1){
			return;
		}
		if (!ueditor) {
			return;
		}
		var content = ueditor.getContent();
		if(content == '' || content.length == 0){
			return;
		}
		attachSaveState(true);
		var answerMode = $('#answerMode').val() || 0;
		if (answerMode == 0) {
			submitForm(true, false, false);
		} else if (answerMode == 1) {
			var questionWrap = $(ueditor.container).parents('.questionLi');
			submitForm(true, questionWrap, false);
		}
	} catch (err) {alert(err);}
}

function attachSaveState(state){
	if(state){
		window.Ueditor_Attachment_Saving = true;
	}else{
		window.Ueditor_Attachment_Saving = false;
	}
}



function checkBrowerBack(){
	try{
		   if(!window.sessionStorage){
			   return;
		   }
		   if($('#checkExamBrowerBack').val() != 1){
			   return;
		   }
		   var entryExamTime = $('#enterPageTime').val() || '';
		   var lastEntryExamTime = window.sessionStorage.getItem('LAST_ENTER_PAGE_TIME') || '';
		   if(entryExamTime && lastEntryExamTime &&  parseInt(entryExamTime) < parseInt(lastEntryExamTime)){
			   window.Exam_Brower_Back = true;
			   var url = location.href;
			   if (url.indexOf("&_v=") == -1) {
				    url += "&_v=" + Math.random();
				} else {
				    url = url.replace(/&_v=[^&]*/, "&_v=" + Math.random());
		        }
			   location.href = url;
			   return;
		   }
		   window.Exam_Brower_Back = false;
		   window.sessionStorage.setItem('LAST_ENTER_PAGE_TIME',entryExamTime);
	}catch(err){
		console.log(err);
	}
}


function splitScreenScrollHeight(){
	var winHeigt = $(window).height() || 0;
	var het40 = $('.het40').height() || 0;
	var mainhet_paddingTop30 = parseInt($('.mainhet').css('padding-top') || 0);
	var nextDiv_outerHeight76 = $('.nextDiv').outerHeight() || 0; 
	var limitTime_outerHeight46 = $(".limitTime").outerHeight() || 0;
	var middleAreaHeight  = winHeigt - het40 -  mainhet_paddingTop30 - nextDiv_outerHeight76 - limitTime_outerHeight46;
	return middleAreaHeight;
}

$(function () {
    //计算高度
    var screenHet = splitScreenScrollHeight();
    $(".splitScreenBx").css("height", screenHet + "px");
    $(".noSplitBx").css("height", screenHet + "px");
    //右侧答题卡折叠
    $(".foldBox .foldBtn").click(function () {
        $(".Marking_right_280").animate({right: "-280px"}, 300);
        $(this).hide();
        setTimeout(function(){
        	$(".unfoldBtn").show();
        },300);
        $(".marking_content").addClass("marking_content_wrap");
        $(".layoutBtn").animate({right: "0px"}, 300)
    })
    $(".foldBox .unfoldBtn").click(function () {
        $(".Marking_right_280").animate({right:"0px"}, 300);
        $(this).hide();
        $(".foldBtn").show();
        $(".marking_content").removeClass("marking_content_wrap");
        $(".layoutBtn").animate({right: "280px"}, 300)
    })
    $(".layoutBtn").on('click', '.layUpdown', function () {
        $(this).hide().siblings('.layAround').show();
        $(".splitScreenBx").css("display", "block");
        $(".splitS-left,.splitS-right").css("height", "auto");
        $(".splitS-right").css("border-left", "none");
    });
    $(".layoutBtn").on('click', '.layAround', function () {
        $(this).hide().siblings('.layUpdown').show();
        $(".splitScreenBx").css("display", "flex");
        $(".splitS-right").css("border-left", "1px solid #ebebeb");
    });
    $(document).on("click", ".selectBox", function() {
        var screenHet = splitScreenScrollHeight();
        $(".noSplitBx").css("height", screenHet + "px");
    });
})





$(function () {
    markingHeight();

    topicNumberScroll();

    window.onresize = function () {
        markingHeight();
    };

    $(".topicNumber_list li").click(function (event) {
        var questionId = $(this).attr("data");
        var markingH = $("#fanyaMarking").offset().top + 10;
        var id = ".scroll_" + questionId;
        var ele = $(id);
        if (ele.length == 0) {
            return;
        }
        $("html,body").animate({
            scrollTop: ele.offset().top - markingH
        }, 500);
    });

    // 右侧高度
    function markingHeight() {
        var windHeight = $(window).height();
        var markingH = $("#fanyaMarking").offset().top;
        $('#rightHeight').css({
            'max-height' : windHeight - markingH,
            'top' : markingH
        });// 左侧top
    }

    // 右侧滚动条
    function topicNumberScroll() {
        $("#topicNumberScroll").niceScroll({
            cursorborder: "",
            cursorwidth: 8,
            cursorcolor: "#e6ecf5",
            boxzoom: false,
            autohidemode: true
        });
        setInterval(function () {
            $("#topicNumberScroll").getNiceScroll().resize(); // 检测滚动条是否重置大小（当窗口改变大小时）
        }, 300)
    }
});


function lockExamPopTip(lockedType) {
	var winId = "lockExamWin";
	if ($('#' + winId).is(':visible')) {
		return;
	}
	var confirmFunction = function() {
		 var examId = $("#testPaperId").val();
		 var answerId = $("#testUserRelationId").val();
		 var classId = $("#classId").val();
		 var personId = $("#cpi").val();
		 var url = location.origin + '/keeper/appeal/mobile/page/submit?clazzId=' +  classId +  '&examId=' + examId + '&personId=' +  personId  +'&answerId=' + answerId + '&type=3';
		 window.open(url);
	};
	var cancelFunction = function() {
		  closeMonitor();
		  location.href = examNotesUrl();
		  return;
   };
	var confirmBtn = $('#' + winId).find('.confirmClose');
	var cancelBtn = $('#' + winId).find('.cancel')
	confirmBtn.off('click');
	cancelBtn.off('click');
	confirmBtn.on('click', confirmFunction);
	cancelBtn.on('click', cancelFunction);
	 var message = '';
     if(lockedType == 1){
    	 var switchScreenNumberLimit = $('#switchScreenNumberLimit').val() || ($('#exitCount').val() || 0);
    	 message =  I18N.exitCountExamLockTipPrefix + switchScreenNumberLimit + I18N.exitCountExamLockTipSuffix;
     }else {
    	 var switchScreenDurationLimit = $('#switchScreenDurationLimit').val() || ($('#exitDuration').val() || 0);
    	 message =  I18N.exitDurationExamLockTipPrefix + switchScreenDurationLimit + I18N.exitDurationExamLockTipSuffix;
     }
	$('#' + winId).find('.popWord').html(message);
	$("#" + winId).fullFadeIn();
}


$(document).ready(function checkLockExam(event) {
	var answerLocked = $('#answerLocked').val() || 0
	if(answerLocked == 0){
		return;
	}
	lockExamPopTip(answerLocked);
});